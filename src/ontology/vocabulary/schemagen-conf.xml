<?xml version='1.0'?>

<!DOCTYPE rdf:RDF [
        <!ENTITY jena    'http://jena.hpl.hp.com/'>
        <!ENTITY rdf     'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
        <!ENTITY rdfs    'http://www.w3.org/2000/01/rdf-schema#'>
        <!ENTITY owl     'http://www.w3.org/2002/07/owl#'>
        <!ENTITY xsd     'http://www.w3.org/2001/XMLSchema#'>
        <!ENTITY base    '&jena;2003/04/schemagen'>
        <!ENTITY sgen    '&base;#'>
        ]>

<rdf:RDF
        xmlns:rdf   ="&rdf;"
        xmlns:rdfs  ="&rdfs;"
        xmlns:owl   ="&owl;"
        xmlns:sgen  ="&sgen;"
        xmlns       ="&sgen;"
        xml:base    ="&base;">

    <sgen:Config>
        <!-- specifies that the source document uses OWL -->
        <sgen:owl rdf:datatype="&xsd;boolean">true</sgen:owl>

        <!-- specifies that we want the generated vocab to use OntClass, OntProperty, etc, not Resource and Property -->
        <sgen:ontology rdf:datatype="&xsd;boolean">false</sgen:ontology>

        <!-- specifies that we want names mapped to uppercase (as standard Java constants) -->
        <sgen:uppercase rdf:datatype="&xsd;boolean">true</sgen:uppercase>

        <!-- append Vocab to class name, so input beer.owl becomes BeerVocab.java
        <sgen:classnamesuffix rdf:datatype="&xsd;string">Vocab</sgen:classnamesuffix>
        -->

        <!-- the Java package that the vocabulary is in
        <sgen:package rdf:datatype="&xsd;string">com.engapa.poc.ontologies</sgen:package>
        -->

        <!-- the directory or file to write the results out to
        <sgen:output rdf:datatype="&xsd;string">src/main/java/com/engapa/poc/ontologies</sgen:output>
        -->

        <!-- the template for the file header -->
        <sgen:header rdf:datatype="&xsd;string">
/*****************************************************************************
* Source code information
* -----------------------
* Original author    Free Projects, pocs.engapa.com
* Author email       ontology-pocs@engapa.com
* Package            %package%
* Web site           http://pocs.engapa.com/ontologies/triffid
* Created            %date%
*
* Free Copyright Â©
*****************************************************************************/

%package%

%imports%

/** Vocabulary definitions, auto-generated by jena schemagen on %date%  */
        </sgen:header>

        <!-- the template for the file footer (note @footer@ is an Ant-ism, and will not be processed by SchemaGen)
        <sgen:footer rdf:datatype="&xsd;string">
        /*
        @footer@
        */
        </sgen:footer> -->

        <!-- template for extra declarations at the top of the class file
        <sgen:declarations rdf:datatype="&xsd;string">
        /** Factory for generating symbols */
        private static KsValueFactory s_vf = new DefaultValueFactory();
        </sgen:declarations>
        -->

        <!-- template for introducing the properties in the vocabulary -->
        <sgen:propSection rdf:datatype="&xsd;string">
// --- Vocabulary properties ---
        </sgen:propSection>

        <!-- template for introducing the classes in the vocabulary -->
        <sgen:classSection rdf:datatype="&xsd;string">
// --- Vocabulary classes ---
        </sgen:classSection>

        <!-- template for introducing the datatypes in the vocabulary -->
        <sgen:datatypeSection rdf:datatype="&xsd;string">
// --- Vocabulary datatypes ---
        </sgen:datatypeSection>

        <!-- template for introducing the individuals in the vocabulary -->
        <sgen:individualsSection rdf:datatype="&xsd;string">
// --- Vocabulary individuals ---
        </sgen:individualsSection>

        <!-- template for doing fancy declarations of individuals
        <sgen:individualTemplate rdf:datatype="&xsd;string">public static final KsSymbol %valname% = s_vf.newSymbol( "%valuri%" );

        /** Ontology individual corresponding to {@link #%valname%} */
          public static final %valclass% _%valname% = m_model.%valcreator%( %valtype%, "%valuri%" );
          </sgen:individualTemplate>
        -->

    </sgen:Config>

</rdf:RDF>